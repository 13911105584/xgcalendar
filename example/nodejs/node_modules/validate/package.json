{
  "name": "validate",
  "description": "Validate object properties in javascript.",
  "version": "0.2.2",
  "author": {
    "name": "Eivind Fjeldstad"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/eivindfjeldstad/validate.git"
  },
  "keywords": [
    "validation",
    "validate",
    "valid",
    "object"
  ],
  "scirpts": {
    "test": "node test"
  },
  "readme": "# Validate\nValidate object properties in javascript.\n\n## Use\n```javascript\nvar validate = require('validate');\n\nvar schema = {\n    name    : { type: 'string', required: true }\n  , email   : { type: 'email', required: true, message: \"Invalid email\" }\n  , number  : { type: 'number', min: 1, max: 99 }\n  , address : {\n      street    : { type: 'string' }\n    , city      : { type: 'string', required: true }\n    , zip       : { type: 'string', len: 8, message: \"Invalid zip\" }\n  }\n  , array   : { type: 'array', minLen: 1, values: { type: 'number' } }\n};\n\nvar data = validate(schema, { /* data to validate */ });\n\nif (Array.isArray(data)) {\n  // Handle errors\n} else {\n  db.insert(data, function (err) {\n    // blah blah\n  });\n}\n```\n## Typecasting\nYou can either set ```options.cast = true```:\n```javascript\nvar schema = { \n  test: { type: 'number', max: 5 }\n};\n\nvar data = { test: '2' }; // test is a string\n\ndata = validate(schema, data, { cast: true });\nconsole.log(typeof data.test); // number\n```\nOr you can specify a cast property on the schema\n\n```javascript\nvar schema = {\n  test: { type: 'string', cast: 'number' }\n};\n\nvar data = validate(schema, { test: '2' });\nconsole.log(typeof data.test); // number\n```\nThis allows you to do validation on both the raw and the casted value\n```javascript\nvar schema = {\n  test: { type: 'string', len: '2', cast: { type: 'number', max: 10 } };\n};\n```\nThe cast property can also be a custom function: ```cast: function (a) {}```\n\n## Licence\nMIT\n\n",
  "readmeFilename": "readme.md",
  "_id": "validate@0.2.2",
  "dist": {
    "shasum": "14ae0e7d0931a70c46d08e920565afde61029fb1"
  },
  "_from": "validate@",
  "_resolved": "https://registry.npmjs.org/validate/-/validate-0.2.2.tgz"
}
